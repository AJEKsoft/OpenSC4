[gd_scene load_steps=20 format=2]

[ext_resource path="res://City.gd" type="Script" id=1]
[ext_resource path="res://CameraAnchor3D.gd" type="Script" id=2]
[ext_resource path="res://Terrain.gd" type="Script" id=3]
[ext_resource path="res://WaterPlane.gd" type="Script" id=4]
[ext_resource path="res://TestS3D.gd" type="Script" id=5]

[sub_resource type="Shader" id=4]
code = "shader_type spatial;

uniform sampler2DArray terrain : hint_albedo;
uniform int zoom;
uniform sampler2D layer;
uniform sampler2D watermap;
varying smooth vec3 coord_pass;
varying smooth float map_str;
const float PI = 3.14159265358979323846;
uniform float cliff_ind;
uniform float beach_ind;
uniform float tiling_factor;
uniform float water_height = 15.625; //250.0/16.0
uniform bool grid_bool = false;
uniform float beach_ht_range;

void vertex()
{
	coord_pass = VERTEX.xyz;
	
	map_str = (texelFetch(watermap, ivec2(coord_pass.zx), 0).r*beach_ht_range);
	//if (map_str < (beach_ht_range/2.0)){
	//	map_str = min(map_str, 1.0);
	//}
	//else{
	//	map_str = 0.0;
	//}
}

void fragment()
{
	float zoom_ind = min( float(zoom-1), 4.0);
	vec2 coord = coord_pass.xz;
	// might not be the fastest way of doing this
	ivec2 icoord1 = ivec2(coord);
	ivec2 icoord2 = icoord1 + ivec2(1, 0);
	ivec2 icoord3 = icoord1 + ivec2(0, 1);
	ivec2 icoord4 = icoord1 + ivec2(1, 1);
	float index1 = texelFetch(layer, icoord1, 0).r*255.0;
	float index2 = texelFetch(layer, icoord2, 0).r*255.0;
	float index3 = texelFetch(layer, icoord3, 0).r*255.0;
	float index4 = texelFetch(layer, icoord4, 0).r*255.0;
	vec2 rem1 = abs(vec2(icoord1) - coord);
	vec2 rem2 = abs(vec2(icoord2) - coord);
	vec2 rem3 = abs(vec2(icoord3) - coord);
	vec2 rem4 = abs(vec2(icoord4) - coord);
	vec3 grid = vec3(1.0, 1.0, 1.0);
	if (grid_bool){
		if (rem1.x < (0.05 * max((5.0-float(zoom_ind)), 0.0)) ){
			grid = vec3(0.6, 0.6, 0.6);
		}
		if (rem1.y < (0.05 * max((5.0-float(zoom_ind)), 0.0)) and grid_bool == true){
			grid = vec3(0.6, 0.6, 0.6);
		}
	}
	float str1 = ((cos((rem1.x)*PI)*0.5+0.5) * (cos((rem1.y)*PI)*0.5+0.5));
	float str2 = ((cos((rem2.x)*PI)*0.5+0.5) * (cos((rem2.y)*PI)*0.5+0.5));
	float str3 = ((cos((rem3.x)*PI)*0.5+0.5) * (cos((rem3.y)*PI)*0.5+0.5));
	float str4 = ((cos((rem4.x)*PI)*0.5+0.5) * (cos((rem4.y)*PI)*0.5+0.5));
	float sum_str = str1 + str2 + str3 + str4;
	vec3 col1 = texture(terrain, vec3(UV.x*tiling_factor, UV.y*tiling_factor, float(zoom_ind)+index1)).rgb * (str1/sum_str);
	vec3 col2 = texture(terrain, vec3(UV.x*tiling_factor, UV.y*tiling_factor, float(zoom_ind)+index2)).rgb * (str2/sum_str);
	vec3 col3 = texture(terrain, vec3(UV.x*tiling_factor, UV.y*tiling_factor, float(zoom_ind)+index3)).rgb * (str3/sum_str);
	vec3 col4 = texture(terrain, vec3(UV.x*tiling_factor, UV.y*tiling_factor, float(zoom_ind)+index4)).rgb * (str4/sum_str);
	//cliffs
	vec3 overlay = vec3(0.0, 0.0, 0.0);
	vec3 underlay = vec3(0.0, 0.0, 0.0);
	float over_str = 0.0;
	float under_str = 0.0;
	float beachy = ((coord_pass.y) - water_height);
	if (abs(NORMAL.y) < 0.5){
		over_str = max(min(((0.5-abs(NORMAL.y))*2.2), 1.0), 0.0);
		if (abs(NORMAL.x) < abs(NORMAL.z)){
			overlay = texture(terrain, vec3(UV.y*tiling_factor, UV.x*tiling_factor, float(zoom_ind)+cliff_ind)).rgb;
		}
		else{
			overlay = texture(terrain, vec3(UV.x*tiling_factor, UV.y*tiling_factor, float(zoom_ind)+cliff_ind)).rgb;
		}
	}
	if(beachy < 4.0){
		under_str = max(min(((4.0*map_str)-(beachy)), 1.0), 0.0);
		underlay = texture(terrain, vec3(UV.y*tiling_factor, UV.x*tiling_factor, float(zoom_ind)+beach_ind)).rgb;
	}
	

		ALBEDO = (
					(
						(
							(
							(col1 + col2 + col3 + col4) * (1.0-over_str)
							) 
						+ (overlay * over_str)
						)
					 * (1.0 - under_str)
					) 
					+ (underlay * under_str)
				) * grid;
		//ALBEDO = texture(layer, UV).rgb;
		
	}"

[sub_resource type="ShaderMaterial" id=5]
shader = SubResource( 4 )
shader_param/zoom = null
shader_param/cliff_ind = null
shader_param/beach_ind = null
shader_param/tiling_factor = null
shader_param/water_height = 15.625
shader_param/grid_bool = true
shader_param/beach_ht_range = null

[sub_resource type="Shader" id=9]
code = "shader_type spatial;

uniform sampler2D watermap;
// 512 to be used as 16 pixels per tile(1 per m) with octaves using 25 and 39.0625
// first octave means the texture encompasses 32 tiles before repeating, 10.24, 6.55 tiles for octaves 
// to reduce noticable repeatedness octaves should not repeat at the same interger number of tiles
uniform sampler2D noise_texture; //512x512 pixel noise texture
uniform sampler2D noise_normals; //provides prebaked normals
uniform int noise_octaves = 3; //number of scale steps used for layering
uniform float noise_persistance = 0.64; //strength of octaves; 1.0 -> 0.4 -> 0.16
uniform float noise_lacunarity = 0.94; //scale step between ocraves; 1.0 -> 0.6 -> 0.36
uniform float noise_angle_ransomness = 8.0; //range for randomness of direction
uniform vec2 noise_direction = vec2(0.4, 0.2); //controlls direction of motion
uniform float noise_time_scale = 60.0; //speed control
uniform float wave_height_scale = 4.0;
uniform float wave_width_scale = 60.0;
uniform float normal_horizontal = 1.0;
uniform float normal_vertical = 1.0;
varying float noise_height;

uniform sampler2DArray watertexture : hint_albedo;
uniform int zoom;
uniform float tiling_factor;
uniform float max_depth;
uniform float depth_range;
uniform float water_fog_density: hint_range(0.0, 2.0) = 1.668;
varying vec2 coord;
varying highp vec4 n_val1;
varying highp vec4 n_val2;
varying highp vec4 n_val3;

uniform float rim = 1.0;
uniform float metallic = 1.0;
uniform float roughness = 0.3;

vec4 noise_values(vec2 coords, int oct){
	float pers_str = pow(noise_persistance, float(oct));
	float lacu_scl = pow(noise_lacunarity, float(oct));
	vec2 rand_vec = vec2((2.0*texelFetch(noise_texture, ivec2(53*oct, 47*oct), 0).x -1.0) * noise_angle_ransomness, (2.0*texelFetch(noise_texture, ivec2(47*oct, 53*oct), 0).x -1.0) * noise_angle_ransomness);
	vec2 flow = ((noise_direction + rand_vec) * (TIME * noise_time_scale))*(5.0-lacu_scl);
	vec2 pixel_loc = ((coords+flow) * wave_width_scale * (1.0/lacu_scl));//, vec2(2048.0, 2048.0));
	
	vec4 values = vec4(pixel_loc, pers_str, 1.0);
	return values;
}

void vertex(){
	coord = VERTEX.xz;
	noise_height = 0.0;
	n_val1 = noise_values(coord, 0);
	noise_height += (pow(texture(noise_texture, mod(n_val1.rg/1024.0, 1.0)).x, 2.0) * n_val1.b);
	n_val2 = noise_values(coord, 1);
	noise_height -= (pow(texture(noise_texture, mod(n_val1.gr/1024.0, 1.0)).x, 2.0) * n_val1.b);
	n_val3 = noise_values(coord, 2);
	noise_height -= (pow(texture(noise_texture, mod(n_val1.rg/1024.0, 1.0)).x, 2.0) * n_val1.b);
	noise_height = 2.0 * (noise_height / (n_val1.b + n_val2.b + n_val3.b)) - 1.0;
	VERTEX.y += noise_height*wave_height_scale;
	
}

void fragment(){
	
	float depth = texture(DEPTH_TEXTURE, SCREEN_UV).x;
	vec3 ndc = vec3(SCREEN_UV, depth) * 2.0 - 1.0;
	vec4 view = INV_PROJECTION_MATRIX * vec4(ndc, 1.0);
	view.xyz /= view.w;
	
	float delta_depth = abs(abs(view.z) - abs(VERTEX.z));
	float depth_alpha = 1.0;
	if (delta_depth < 5.0){
		depth_alpha = min(sqrt((delta_depth) / 20.0) + 0.5, 1.0);
	}
	float zoom_ind = min( float(zoom-1), 4.0);
	vec3 noisenormal = vec3(0.0);
	vec4 noise_tex = texture(noise_normals, mod(n_val1.rg/1024.0, 1.0));// * vec4(2.0, 2.0, 1.0, 1.0) - vec4(1.0, 1.0, 0.0, 0.0);
	noisenormal += (normalize(vec3(normal_horizontal*(2.0*sqrt(noise_tex.r)-1.0), normal_vertical*(noise_tex.b), normal_horizontal*(2.0*sqrt(noise_tex.g)-1.0))) * n_val1.b);
	noise_tex = texture(noise_normals, mod(n_val2.rg/1024.0, 1.0));// * vec4(2.0, 2.0, 1.0, 1.0) - vec4(1.0, 1.0, 0.0, 0.0);
	noisenormal -= (normalize(vec3(normal_horizontal*(2.0*sqrt(noise_tex.g)-1.0), normal_vertical*(noise_tex.b), normal_horizontal*(2.0*sqrt(noise_tex.r)-1.0))) * n_val2.b);
	noise_tex = texture(noise_normals, mod(n_val3.rg/1024.0, 1.0));// * vec4(2.0, 2.0, 1.0, 1.0) - vec4(1.0, 1.0, 0.0, 0.0);
	noisenormal -= (normalize(vec3(normal_horizontal*(sqrt(noise_tex.r)-0.5), normal_vertical*(noise_tex.b), normal_horizontal*(sqrt(noise_tex.g)-0.5))) * n_val3.b);
	//noisenormal /= (n_val1.b + n_val2.b + n_val3.b);
	NORMAL = normalize((vec4(noisenormal.rgb, 1.0) * CAMERA_MATRIX).rgb);
	vec3 break_col = vec3(0.0);
	if (depth_alpha < 0.8){
		if (noisenormal.y > 0.95){
			break_col = vec3(pow((1.0 - (1.25 * depth_alpha)), 1.5) * (100.0 * noisenormal.y-95.0));
		}
	}
	RIM = rim;
	METALLIC = metallic;
	ROUGHNESS = roughness;
	ALBEDO = texture(watertexture, vec3(vec2(0.0, 0.0), float(zoom_ind))).rgb;// + break_col;
	ALPHA = sqrt(depth_alpha);
}"

[sub_resource type="ShaderMaterial" id=10]
shader = SubResource( 9 )
shader_param/noise_octaves = 3
shader_param/noise_persistance = 0.7
shader_param/noise_lacunarity = 0.4
shader_param/noise_angle_ransomness = 2.0
shader_param/noise_direction = Vector2( -0.5, -0.4 )
shader_param/noise_time_scale = 0.02
shader_param/wave_height_scale = 0.1
shader_param/wave_width_scale = 40.0
shader_param/normal_horizontal = -1.0
shader_param/normal_vertical = 0.1
shader_param/zoom = null
shader_param/tiling_factor = null
shader_param/max_depth = null
shader_param/depth_range = null
shader_param/water_fog_density = 1.668
shader_param/rim = 0.0
shader_param/metallic = 1.0
shader_param/roughness = 0.3

[sub_resource type="OpenSimplexNoise" id=11]
seed = 23
octaves = 1
persistence = 0.64
lacunarity = 0.64

[sub_resource type="NoiseTexture" id=12]
flags = 0
width = 1024
height = 1024
seamless = true
noise = SubResource( 11 )

[sub_resource type="OpenSimplexNoise" id=13]
seed = 23
octaves = 1
period = 32.0
persistence = 0.64
lacunarity = 0.64

[sub_resource type="NoiseTexture" id=14]
flags = 22
width = 1024
height = 1024
seamless = true
as_normalmap = true
bump_strength = 5.0
noise = SubResource( 13 )

[sub_resource type="Shader" id=7]
code = "shader_type spatial;

uniform sampler2DArray terrain : hint_albedo;
uniform int zoom;
varying smooth float height_var;
varying flat float height_flat;
const float PI = 3.14159265358979323846;
uniform float tiling_factor;
uniform float top_ind;
uniform float mid_ind;
uniform float bot_ind;

void vertex()
{
	height_var = VERTEX.y;
	height_flat = VERTEX.y;
	
}

void fragment()
{
	float edge_tex = 0.0;
	float zoom_ind = min(float(zoom), 4.0);
	if (UV.y > 0.3152){
		edge_tex = bot_ind;
		}
	else{  
		if(UV.y > 0.1576){
			edge_tex = mid_ind;
		}
		else{
			edge_tex = top_ind;
		}
	}
	float uvx = UV.x*tiling_factor;
	float uvy = UV.y*tiling_factor;
	if (zoom < 4){
		float div = 1.0 / pow(2.0, float(4-zoom)); // farther zooms (lower zoom value) have smaller textures
		uvx = mod(uvx, div);
		uvy = mod(uvy, div);
	}
	ALBEDO = texture(terrain, vec3(uvx, uvy, float(zoom_ind)+edge_tex)).rgb;
}"

[sub_resource type="ShaderMaterial" id=8]
shader = SubResource( 7 )
shader_param/zoom = null
shader_param/tiling_factor = null
shader_param/top_ind = null
shader_param/mid_ind = null
shader_param/bot_ind = null

[sub_resource type="Shader" id=16]
code = "shader_type spatial;

uniform sampler2DArray s3dtexture : hint_albedo;

void fragment(){
	ALBEDO = texture(s3dtexture, vec3(UV, 0.0)).rgb;
	ALPHA = texture(s3dtexture, vec3(UV, 0.0)).a;
}
	"

[sub_resource type="ShaderMaterial" id=17]
shader = SubResource( 16 )

[sub_resource type="ProceduralSky" id=15]
radiance_size = 0
sky_top_color = Color( 0.909804, 0.92549, 0.933333, 1 )
sky_horizon_color = Color( 0.258824, 0.364706, 0.501961, 1 )
sky_energy = 0.8
ground_bottom_color = Color( 0.909804, 0.92549, 0.933333, 1 )
ground_horizon_color = Color( 0.258824, 0.364706, 0.501961, 1 )
ground_energy = 0.25
sun_energy = 0.0
texture_size = 0

[sub_resource type="Environment" id=1]
background_mode = 2
background_sky = SubResource( 15 )
background_color = Color( 0.317647, 0.341176, 0.352941, 1 )
ambient_light_color = Color( 1, 1, 1, 1 )

[node name="City" type="Spatial"]
script = ExtResource( 1 )

[node name="Spatial" type="Spatial" parent="."]

[node name="Terrain" type="MeshInstance" parent="Spatial"]
transform = Transform( 4.47035e-08, 2.98023e-08, -1, 0, 1, 0, -1, 0, -4.47035e-08, 0, 0, 0 )
material_override = SubResource( 5 )
skeleton = NodePath("../..")
script = ExtResource( 3 )

[node name="WaterPlane" type="MeshInstance" parent="Spatial"]
transform = Transform( -1, 5.96046e-08, 1.3411e-07, -1.49012e-08, 1, -2.98023e-08, -1.04308e-07, 0, -1, 0, 0, 0 )
material_override = SubResource( 10 )
lightmap_scale = 2
skeleton = NodePath("../..")
software_skinning_transform_normals = false
script = ExtResource( 4 )

[node name="NoiseTexture" type="TextureRect" parent="Spatial/WaterPlane"]
visible = false
margin_left = 107.0
margin_top = 169.0
margin_right = 1131.0
margin_bottom = 1193.0
texture = SubResource( 12 )

[node name="NoiseNormals" type="TextureRect" parent="Spatial/WaterPlane"]
visible = false
margin_left = -407.0
margin_top = 170.0
margin_right = 617.0
margin_bottom = 1194.0
texture = SubResource( 14 )

[node name="Border" type="MeshInstance" parent="Spatial"]
transform = Transform( -4.37114e-08, -3.82137e-15, -1, -8.74228e-08, 1, 0, -1, -8.74228e-08, 4.37114e-08, 0, 0, 0 )
visible = false
material_override = SubResource( 8 )

[node name="Sun" type="DirectionalLight" parent="Spatial"]
transform = Transform( 1.05984, -0.1417, 0.227311, 0, 0.762665, 0.304699, 0, -5.96046e-08, 0.951493, 0, 0, 0 )
portal_mode = 3
light_energy = 2.0
light_indirect_energy = 0.3
light_specular = 0.0
light_bake_mode = 0
directional_shadow_mode = 0
directional_shadow_normal_bias = 1.5
directional_shadow_max_distance = 1500.0

[node name="TestS3D" type="MeshInstance" parent="Spatial"]
transform = Transform( -1, 0, -8.74228e-08, 0, 1, 0, 8.74228e-08, 0, -1, 0, 0, 0 )
material_override = SubResource( 17 )
script = ExtResource( 5 )

[node name="KinematicBody" type="KinematicBody" parent="."]
script = ExtResource( 2 )

[node name="Camera" type="Camera" parent="KinematicBody"]
transform = Transform( 1, 0, 0, 0, -4.37114e-08, -1, 0, 1, -4.37114e-08, 0, 0, 0 )
projection = 1
current = true
size = 292.0
near = 451.0
far = 300.0

[node name="WorldEnvironment" type="WorldEnvironment" parent="KinematicBody"]
environment = SubResource( 1 )
__meta__ = {
"_editor_description_": "Default environment"
}
